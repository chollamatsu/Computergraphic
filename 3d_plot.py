# -*- coding: utf-8 -*-
"""3D_plot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jdtAUhVvi4oZ7SUnxn9ZebhS7uCaYnxx
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import interpolate
from mpl_toolkits.mplot3d import Axes3D

def DrawLine(total_rad,z_factor, num_true_pts):
  # num_true_pts = 50#wanted 10 observations.
  s_true = np.linspace(0, total_rad, num_true_pts)#start of interval, stop of interval, number of item
  
  x_true = np.cos(s_true)
  y_true = np.sin(s_true)
  z_true = s_true/z_factor
  # LinePlot(x_true, y_true, z_true)

  fig2 = plt.figure(2)
  ax3d = fig2.add_subplot(111, projection='3d')

  u_fine = np.linspace(0,1,num_true_pts)
  ax3d.plot(x_true, y_true, z_true, '#1D7874')
  
  fig2.show()#draw line

def LinePlot(x, y, z):
  for index in range (0, len(x)):
    print(index," x:",x[index]," y:",y[index]," z:",z[index])

def Plot(total_rad,z_factor, num_sample_pts):
  noise = 0.1
  s_sample = np.linspace(0, total_rad, num_sample_pts)
  x_sample = np.cos(s_sample) + noise * np.random.randn(num_sample_pts)
  y_sample = np.sin(s_sample) + noise * np.random.randn(num_sample_pts)
  z_sample = s_sample/z_factor + noise * np.random.randn(num_sample_pts)

  tck, u = interpolate.splprep([x_sample,y_sample,z_sample], s=2)
  x_knots, y_knots, z_knots = interpolate.splev(tck[0], tck)

  fig2 = plt.figure(2)
  ax3d = fig2.add_subplot(111, projection='3d')

  ax3d.plot(x_sample, y_sample, z_sample, 'y*')# plot star
  ax3d.plot(x_knots, y_knots, z_knots, 'o')# plot dot

  plt.show()

def main():
  print(f"Select line press: l \nSelect star press: s")
  draw_type = input("Select type: ")
  total_rad = int(input("Line length: "))
  z_factor = int(input("Z Factor: "))
  if (draw_type.lower()=='l'):
    num_true_pts = int(input("Number of observation points: "))
    DrawLine(total_rad, z_factor, num_true_pts)
  else:
    num_sample_pts = int(input("Number of star: "))
    Plot(total_rad, z_factor, num_sample_pts)

main()